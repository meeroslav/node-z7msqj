var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/.pnpm/sisteransi@1.0.5/node_modules/sisteransi/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/sisteransi@1.0.5/node_modules/sisteransi/src/index.js"(exports, module) {
    "use strict";
    var ESC = "\x1B";
    var CSI = `${ESC}[`;
    var beep = "\x07";
    var cursor2 = {
      to(x, y) {
        if (!y)
          return `${CSI}${x + 1}G`;
        return `${CSI}${y + 1};${x + 1}H`;
      },
      move(x, y) {
        let ret = "";
        if (x < 0)
          ret += `${CSI}${-x}D`;
        else if (x > 0)
          ret += `${CSI}${x}C`;
        if (y < 0)
          ret += `${CSI}${-y}A`;
        else if (y > 0)
          ret += `${CSI}${y}B`;
        return ret;
      },
      up: (count = 1) => `${CSI}${count}A`,
      down: (count = 1) => `${CSI}${count}B`,
      forward: (count = 1) => `${CSI}${count}C`,
      backward: (count = 1) => `${CSI}${count}D`,
      nextLine: (count = 1) => `${CSI}E`.repeat(count),
      prevLine: (count = 1) => `${CSI}F`.repeat(count),
      left: `${CSI}G`,
      hide: `${CSI}?25l`,
      show: `${CSI}?25h`,
      save: `${ESC}7`,
      restore: `${ESC}8`
    };
    var scroll = {
      up: (count = 1) => `${CSI}S`.repeat(count),
      down: (count = 1) => `${CSI}T`.repeat(count)
    };
    var erase2 = {
      screen: `${CSI}2J`,
      up: (count = 1) => `${CSI}1J`.repeat(count),
      down: (count = 1) => `${CSI}J`.repeat(count),
      line: `${CSI}2K`,
      lineEnd: `${CSI}K`,
      lineStart: `${CSI}1K`,
      lines(count) {
        let clear = "";
        for (let i = 0; i < count; i++)
          clear += this.line + (i < count - 1 ? cursor2.up() : "");
        if (count)
          clear += cursor2.left;
        return clear;
      }
    };
    module.exports = { cursor: cursor2, scroll, erase: erase2, beep };
  }
});

// src/index.ts
var import_sisteransi = __toESM(require_src(), 1);
import { TextPrompt, SelectPrompt, ConfirmPrompt, block } from "@clack/core";
import color from "picocolors";
import { isCancel } from "@clack/core";
var symbol = (state) => {
  switch (state) {
    case "initial":
    case "active":
      return color.cyan("\u25CF");
    case "cancel":
      return color.red("\u25A0");
    case "error":
      return color.yellow("\u25B2");
    case "submit":
      return color.green("\u2714");
  }
};
var barStart = "\u250C";
var bar = "\u2502";
var barEnd = "\u2514";
var text = (opts) => {
  return new TextPrompt({
    validate: opts.validate,
    render() {
      const title = `${color.gray(bar)}
${symbol(this.state)}  ${opts.message}
`;
      const placeholder = opts.placeholder ? color.inverse(opts.placeholder[0]) + color.dim(opts.placeholder.slice(1)) : color.inverse(color.hidden("_"));
      const value = !this.value ? placeholder : this.valueWithCursor;
      switch (this.state) {
        case "error":
          return `${title.trim()}
${color.yellow(bar)}  ${value}
${color.yellow(barEnd)}  ${color.yellow(this.error)}
`;
        case "submit":
          return `${title}${color.gray(bar)}  ${color.dim(this.value)}`;
        case "cancel":
          return `${title}${color.gray(bar)}  ${color.strikethrough(color.dim(this.value))}${this.value.trim() ? "\n" + color.gray(bar) : ""}`;
        default:
          return `${title}${color.cyan(bar)}  ${value}
${color.cyan(barEnd)}
`;
      }
    }
  }).prompt();
};
var confirm = (opts) => {
  const active = opts.active ?? "Yes";
  const inactive = opts.inactive ?? "No";
  return new ConfirmPrompt({
    active,
    inactive,
    initialValue: opts.initialValue ?? true,
    render() {
      const title = `${color.gray(bar)}
${symbol(this.state)}  ${opts.message}
`;
      const value = this.value ? active : inactive;
      switch (this.state) {
        case "submit":
          return `${title}${color.gray(bar)}  ${color.dim(value)}`;
        case "cancel":
          return `${title}${color.gray(bar)}  ${color.strikethrough(color.dim(value))}
${color.gray(bar)}`;
        default: {
          return `${title}${color.cyan(bar)}  ${this.value ? `${color.green("\u25FC")} ${active}` : `${color.dim("\u25FB")} ${color.dim(active)}`} ${color.dim("/")} ${!this.value ? `${color.green("\u25FC")} ${inactive}` : `${color.dim("\u25FB")} ${color.dim(inactive)}`}
${color.cyan(barEnd)}
`;
        }
      }
    }
  }).prompt();
};
var select = (opts) => {
  const opt = (option, state) => {
    const label = option.label ?? option.value;
    if (state === "active") {
      return `${color.green("\u25FC")} ${label} ${option.hint ? color.dim(`(${option.hint})`) : ""}`;
    } else if (state === "selected") {
      return `${color.dim(label)}`;
    } else if (state === "cancelled") {
      return `${color.strikethrough(color.dim(label))}`;
    }
    return `${color.dim("\u25FB")} ${color.dim(label)}`;
  };
  return new SelectPrompt({
    options: opts.options,
    initialValue: opts.initialValue,
    render() {
      const title = `${color.gray(bar)}
${symbol(this.state)}  ${opts.message}
`;
      switch (this.state) {
        case "submit":
          return `${title}${color.gray(bar)}  ${opt(this.options[this.cursor], "selected")}`;
        case "cancel":
          return `${title}${color.gray(bar)}  ${opt(this.options[this.cursor], "cancelled")}
${color.gray(bar)}`;
        default: {
          return `${title}${color.cyan(bar)}  ${this.options.map((option, i) => opt(option, i === this.cursor ? "active" : "inactive")).join(`
${color.cyan(bar)}  `)}
${color.cyan(barEnd)}
`;
        }
      }
    }
  }).prompt();
};
var cancel = (message = "") => {
  process.stdout.write(`${color.gray(barEnd)}  ${color.red(message)}

`);
};
var intro = (title = "") => {
  process.stdout.write(`${color.gray(barStart)}  ${title}
`);
};
var outro = (message = "") => {
  process.stdout.write(`${color.gray(bar)}
${color.gray(barEnd)}  ${color.green(message)}

`);
};
var spinner = () => {
  let unblock;
  let loop;
  return {
    start(message = "") {
      message = message.replace(/\.\.\.$/, "");
      unblock = block();
      process.stdout.write(`${color.gray(bar)}
${color.magenta("\u25C6")}  ${message}
`);
      let i = 0;
      loop = setInterval(() => {
        process.stdout.write(import_sisteransi.cursor.move(-999, -2));
        process.stdout.write(import_sisteransi.erase.down(2));
        process.stdout.write(`${color.gray(bar)}
${color.magenta("\u25C6")}  ${message}${i ? ".".repeat(i) : ""}
`);
        i = i > 2 ? 0 : i + 1;
      }, 300);
    },
    stop(message = "") {
      process.stdout.write(import_sisteransi.cursor.move(-999, -2));
      process.stdout.write(import_sisteransi.erase.down(2));
      clearInterval(loop);
      process.stdout.write(`${color.gray(bar)}
${color.gray("\u25C6")}  ${message}
`);
      unblock();
    }
  };
};
export {
  cancel,
  confirm,
  intro,
  isCancel,
  outro,
  select,
  spinner,
  text
};
