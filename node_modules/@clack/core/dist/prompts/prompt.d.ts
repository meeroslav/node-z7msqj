/// <reference types="node" resolution-mode="require"/>
import { Readable, Writable } from "node:stream";
export declare function isCancel(value: string | symbol): value is symbol;
export interface PromptOptions<Self extends Prompt> {
    render(this: Omit<Self, 'prompt'>): string | void;
    initialValue?: any;
    validate?: ((value: string) => string | void) | undefined;
    input?: Readable;
    output?: Writable;
    debug?: boolean;
}
export type State = 'initial' | 'active' | 'cancel' | 'submit' | 'error';
export default class Prompt {
    private input;
    private output;
    private rl;
    private opts;
    private _track;
    private _render;
    protected _cursor: number;
    state: State;
    value: any;
    error: string;
    constructor({ render, input, output, initialValue, ...opts }: PromptOptions<Prompt>, trackValue?: boolean);
    prompt(): Promise<string | symbol>;
    private subscribers;
    on(event: string, cb: (...args: any) => any): void;
    once(event: string, cb: (...args: any) => any): void;
    emit(event: string, ...data: any[]): void;
    private unsubscribe;
    private onKeypress;
    protected close(): void;
    private restoreCursor;
    private _prevFrame;
    private render;
}
