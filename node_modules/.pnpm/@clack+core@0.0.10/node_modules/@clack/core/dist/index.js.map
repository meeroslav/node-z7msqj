{
  "version": 3,
  "sources": ["../src/prompts/prompt.ts", "../src/prompts/text.ts", "../src/prompts/password.ts", "../src/prompts/select.ts", "../src/prompts/confirm.ts", "../src/utils.ts"],
  "sourcesContent": ["import type { Key, ReadLine } from 'node:readline';\n\nimport { Readable, Writable } from \"node:stream\";\nimport { WriteStream } from 'node:tty';\nimport { stdin, stdout } from \"node:process\";\nimport readline from 'node:readline';\nimport { cursor, erase } from 'sisteransi';\n\nfunction diffLines(a: string, b: string) {\n  if (a === b) return;\n\n  const aLines = a.split('\\n');\n  const bLines = b.split('\\n');\n  const diff: number[] = []\n\n  for (let i = 0; i < Math.max(aLines.length, bLines.length); i++) {\n    if (aLines[i] !== bLines[i]) diff.push(i);\n  }\n\n  return diff;\n}\n\nconst cancel = Symbol('clack:cancel');\nexport function isCancel(value: string|symbol): value is symbol {\n  return value === cancel;\n}\n\nfunction setRawMode(input: Readable, value: boolean) {\n    if ((input as typeof stdin).isTTY) (input as typeof stdin).setRawMode(value);\n}\n\nconst keys = new Set(['up', 'down', 'left', 'right']);\n\nexport interface PromptOptions<Self extends Prompt> {\n    render(this: Omit<Self, 'prompt'>): string | void;\n    initialValue?: any;\n    validate?: ((value: string) => string | void) | undefined;\n    input?: Readable;\n    output?: Writable;\n    debug?: boolean;\n}\n\nexport type State = 'initial' | 'active' | 'cancel' | 'submit' | 'error';\n\nexport default class Prompt {\n  private input: Readable;\n  private output: Writable;\n  private rl!: ReadLine;\n  private opts: Omit<PromptOptions<Prompt>, 'render'|'input'|'output'>;\n  private _track: boolean = false;\n  private _render: (context: Omit<Prompt, 'prompt'>) => string | void;\n  protected _cursor: number = 0;\n\n  public state: State = 'initial';\n  public value: any;\n  public error: string = '';\n\n  constructor({ render, input = stdin, output = stdout, initialValue, ...opts }: PromptOptions<Prompt>, trackValue: boolean = true) {\n    this.opts = opts;\n    this.onKeypress = this.onKeypress.bind(this);\n    this.close = this.close.bind(this);\n    this.render = this.render.bind(this);\n    this._render = render.bind(this);\n    this._track = trackValue;\n\n    this.input = input;\n    this.output = output;\n  }\n\n  public prompt() {\n    const sink = new WriteStream(0)\n    sink._write = (chunk, encoding, done) => {\n      if (this._track) {\n        this.value = this.rl.line.replace(/\\t/g, '');\n        this._cursor = this.rl.cursor;\n        this.emit('value', this.value);\n      }\n      done()\n    }\n    this.input.pipe(sink);\n\n    this.rl = readline.createInterface({\n        input: this.input,\n        output: sink,\n        tabSize: 2,\n        prompt: '',\n        escapeCodeTimeout: 50\n    })\n    readline.emitKeypressEvents(this.input, this.rl);\n    this.rl.prompt();\n\n    this.input.on('keypress', this.onKeypress);\n    setRawMode(this.input, true);\n\n    this.render();\n\n    return new Promise<string|symbol>((resolve, reject) => {\n      this.once('submit', () => {\n        resolve(this.value);\n      })\n      this.once('cancel', () => {\n        this.output.write(cursor.show);\n        resolve(cancel);\n      })\n    })\n  }\n\n  private subscribers = new Map<string, ({ cb: (...args: any) => any, once?: boolean })[]>();\n  public on(event: string, cb: (...args: any) => any) {\n    const arr = this.subscribers.get(event) ?? [];\n    arr.push({ cb });\n    this.subscribers.set(event, arr);\n  }\n  public once(event: string, cb: (...args: any) => any) {\n    const arr = this.subscribers.get(event) ?? [];\n    arr.push({ cb, once: true });\n    this.subscribers.set(event, arr);\n  }\n  public emit(event: string, ...data: any[]) {\n    const cbs = this.subscribers.get(event) ?? [];\n    const cleanup: (() => void)[] = [];\n    for (const subscriber of cbs) {\n      subscriber.cb(...data);\n      if (subscriber.once) {\n        cleanup.push(() => cbs.splice(cbs.indexOf(subscriber), 1));\n      }\n    }\n    for (const cb of cleanup) {\n      cb();\n    }\n  }\n  private unsubscribe() {\n    this.subscribers.clear();\n  }\n\n  private onKeypress(char: string, key?: Key) {\n    if (this.state === 'error') {\n      this.state = 'active';\n    }\n\n    if (key?.name && keys.has(key.name)) {\n      this.emit('cursor', key.name);\n    }\n    if (char && (char.toLowerCase() === 'y' || char.toLowerCase() === 'n')) {\n      this.emit('confirm', char.toLowerCase() === 'y');\n    }\n\n    if (key?.name === 'return') {\n      if (this.opts.validate) {\n        const problem = this.opts.validate(this.value);\n        if (problem) {\n          this.error = problem;\n          this.state = 'error';\n        }\n      }\n      if (this.state !== 'error') {\n        this.state = 'submit';\n      }\n    } \n    if (char === '\\x03') {\n      this.state = 'cancel';\n    }\n    if (this.state === 'submit' || this.state === 'cancel') {\n      this.emit('finalize');\n    }\n    this.render();\n    if (this.state === 'submit' || this.state === 'cancel') {\n      this.close();\n    }\n  }\n\n  protected close() {\n    this.input.removeListener('keypress', this.onKeypress)\n    this.output.write('\\n');\n    setRawMode(this.input, false);\n    this.rl.close();\n    this.emit(`${this.state}`, this.value);\n    this.unsubscribe();\n  }\n\n  // TODO: handle wrapping\n  private restoreCursor() {\n    const lines = this._prevFrame.split('\\n').length - 1;\n    this.output.write(cursor.move(-999, lines * -1));\n  }\n\n  private _prevFrame = '';\n  private render() {\n    const frame = this._render(this) ?? '';\n    if (frame === this._prevFrame) return;\n\n    if (this.state === 'initial') {\n      this.output.write(cursor.hide);\n    } else {\n      const diff = diffLines(this._prevFrame, frame);\n      this.restoreCursor();\n      // If a single line has changed, only update that line\n      if (diff && diff?.length === 1) {\n        const diffLine = diff[0];\n        this.output.write(cursor.move(0, diffLine));\n        this.output.write(erase.lines(1));\n        const lines = frame.split('\\n');\n        this.output.write(lines[diffLine]);\n        this._prevFrame = frame;\n        this.output.write(cursor.move(0, lines.length - diffLine - 1))\n        return;\n      // If many lines have changed, rerender everything past the first line\n      } else if (diff && diff?.length > 1) {\n        const diffLine = diff[0];\n        this.output.write(cursor.move(0, diffLine));\n        this.output.write(erase.down());\n        const lines = frame.split('\\n');\n        const newLines = lines.slice(diffLine);\n        this.output.write(newLines.join('\\n'));\n        this._prevFrame = frame;\n        return;\n      }\n\n      this.output.write(erase.down());\n    }\n    \n    this.output.write(frame);\n    if (this.state === 'initial') {\n      this.state = 'active';\n    }\n    this._prevFrame = frame;\n  }\n}\n", "import Prompt, { PromptOptions } from './prompt.js';\nimport color from 'picocolors';\n\nexport default class TextPrompt extends Prompt {\n    valueWithCursor = '';\n    get cursor() {\n        return this._cursor;\n    }\n    constructor(opts: PromptOptions<TextPrompt>) {\n        super(opts);\n        \n        this.on('finalize', () => {\n            this.valueWithCursor = this.value;\n        });\n        this.on('value', () => {\n            if (this.cursor >= this.value.length) {\n                this.valueWithCursor = `${this.value}${color.inverse(color.hidden('_'))}`;\n            } else {\n                const s1 = this.value.slice(0, this.cursor);\n                const s2 = this.value.slice(this.cursor);\n                this.valueWithCursor = `${s1}${color.inverse(s2[0])}${s2.slice(1)}`\n            }\n        })\n    }\n}\n", "import Prompt, { PromptOptions } from './prompt.js';\nimport color from 'picocolors';\n\ninterface PasswordOptions extends PromptOptions<PasswordPrompt> {\n    mask?: string;\n}\nexport default class PasswordPrompt extends Prompt {\n    valueWithCursor = '';\n    private _mask = '\u2022';\n    get cursor() {\n        return this._cursor;\n    }\n    private get masked() {\n        return this.value.split('').map(() => this._mask).join('')\n    }\n    constructor({ mask, ...opts }: PasswordOptions) {\n        super(opts);\n        this._mask = mask ?? '\u2022';\n        \n        this.on('finalize', () => {\n            this.valueWithCursor = this.masked;\n        });\n        this.on('value', () => {\n            if (this.cursor >= this.value.length) {\n                this.valueWithCursor = `${this.masked}${color.inverse(color.hidden('_'))}`;\n            } else {\n                const s1 = this.masked.slice(0, this.cursor);\n                const s2 = this.masked.slice(this.cursor);\n                this.valueWithCursor = `${s1}${color.inverse(s2[0])}${s2.slice(1)}`\n            }\n        })\n    }\n}\n", "import Prompt, { PromptOptions } from './prompt.js';\n\ninterface SelectOptions<T extends { value: any }> extends PromptOptions<SelectPrompt<T>> {\n    options: T[]\n    initialValue?: T['value'];\n}\nexport default class SelectPrompt<T extends { value: any }> extends Prompt {\n    options: T[];\n    cursor: number = 0;\n\n    private get _value() {\n        return this.options[this.cursor]\n    }\n\n    constructor(opts: SelectOptions<T>) {\n        super(opts, false);\n        \n        this.options = opts.options;\n        this.cursor = this.options.findIndex(({ value }) => value === opts.initialValue);\n        if (this.cursor === -1) this.cursor = 0;\n        this.on('value', () => {\n            this.value = this._value.value;\n        })\n        \n        this.on('cursor', (key) => {\n            switch (key) {\n                case 'left': \n                case 'up': \n                    return this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1;\n                case 'down': \n                case 'right':\n                    return this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1;\n            }\n        })\n    }\n}\n", "import Prompt, { PromptOptions } from './prompt.js';\n\n\ninterface ConfirmOptions extends PromptOptions<ConfirmPrompt> {\n    active: string;\n    inactive: string;\n    initialValue?: boolean;\n}\nexport default class ConfirmPrompt extends Prompt {\n    get cursor() {\n        return this.value ? 0 : 1;\n    }\n\n    private get _value() {\n        return this.cursor === 0;\n    }\n\n    constructor(opts: ConfirmOptions) {\n        super(opts, false);\n        this.value = opts.initialValue ? true : false;\n        \n        this.on('value', () => {\n            this.value = this._value;\n        })\n\n        this.on('confirm', (confirm) => {\n            this.value = confirm;\n            this.state = 'submit';\n            this.close()\n        })\n        \n        this.on('cursor', () => {\n            this.value = !this.value;\n        })\n    }\n}\n", "import type { Key } from \"node:readline\";\n\nimport * as readline from \"node:readline\";\nimport { stdin, stdout } from 'node:process';\nimport { cursor } from \"sisteransi\";\n\nexport function block({ input = stdin, output = stdout, overwrite = true, hideCursor = true } = {}) {\n    const rl = readline.createInterface({\n        input,\n        output,\n        prompt: '',\n        tabSize: 1\n    });\n    readline.emitKeypressEvents(input, rl)\n    if (input.isTTY) input.setRawMode(true);\n\n    const clear = (data: Buffer, { name }: Key) => {\n        const str = String(data);\n        if (str === '\\x03') {\n            process.exit(0);\n        }\n        if (!overwrite) return;\n        let dx = name === 'return' ? 0 : -1;\n        let dy = name === 'return' ? -1 : 0;\n\n        readline.moveCursor(output, dx, dy, () => {\n            readline.clearLine(output, 1, () => {\n                input.once('keypress', clear);\n            });\n        })\n    }\n    if (hideCursor) process.stdout.write(cursor.hide);\n    input.once('keypress', clear);\n\n    return () => {\n        input.off('keypress', clear);\n        if (hideCursor) process.stdout.write(cursor.show);\n        rl.close();\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["color", "readline", "stdin", "stdout", "cursor"]
}
